import streamlit as st
import pytesseract
from PIL import Image
from deep_translator import GoogleTranslator
from gtts import gTTS
import io
import firebase_admin
from firebase_admin import credentials, db
import re
import pandas as pd
from PyPDF2 import PdfReader
from pptx import Presentation

# ---------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ----------
st.set_page_config(page_title="üìò Word & Sentence Translator", layout="centered")
st.title("üìò ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏õ‡∏•‡∏®‡∏±‡∏û‡∏ó‡πå + ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ + ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô")

# ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Normalize ----------
def normalize(word):
    return re.sub(r"[^a-zA-Z0-9\-]", "", word).strip().lower()

# ---------- Firebase Init ----------
def init_firebase():
    if not firebase_admin._apps:
        firebase_config = st.secrets["FIREBASE"]
        cred = credentials.Certificate(firebase_config)
        firebase_admin.initialize_app(cred, {
            'databaseURL': 'https://vocab-tracker-7e059-default-rtdb.asia-southeast1.firebasedatabase.app/'
        })

# ---------- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡∏°‡πà ----------
def save_to_firebase(data):
    init_firebase()
    ref = db.reference('vocabulary')
    existing_data = ref.get()
    existing_words = set()

    if existing_data:
        for item in existing_data.values():
            existing_words.add(normalize(item.get("english", "")))

    added_count = 0
    for word, translation in data:
        cleaned = normalize(word)
        if cleaned and cleaned not in existing_words:
            ref.push({
                "english": word.strip(),
                "thai": translation.strip()
            })
            existing_words.add(cleaned)
            added_count += 1

    if added_count == 0:
        st.info("üìå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô Firebase")
    else:
        st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà {added_count} ‡∏Ñ‡∏≥ ‡∏•‡∏á Firebase ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

# ---------- ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ----------
uploaded_file = st.file_uploader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (.jpg, .png, .pdf, .pptx)", type=["jpg", "jpeg", "png", "pdf", "pptx"])
text = ""

if uploaded_file:
    file_type = uploaded_file.type

    # ---------- IMAGE ----------
    if file_type.startswith("image/"):
        image = Image.open(uploaded_file)
        st.image(image, caption='üì∑ ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö', use_container_width=True)
        gray_image = image.convert("L")
        text = pytesseract.image_to_string(gray_image, lang="eng")

    # ---------- PDF ----------
    elif file_type == "application/pdf":
        reader = PdfReader(uploaded_file)
        total_pages = len(reader.pages)
        st.write(f"üìÑ ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_pages} ‡∏´‡∏ô‡πâ‡∏≤")

        mode = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•", ["üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "üìç ‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤", "üìö ‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤"])
        if mode == "üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß":
            page = st.selectbox("üìÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤", list(range(1, total_pages + 1)), index=0)
            text = reader.pages[page - 1].extract_text()
        elif mode == "üìç ‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤":
            start = st.number_input("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤", 1, total_pages, value=1)
            end = st.number_input("‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤", start, total_pages, value=start)
            texts = [reader.pages[i - 1].extract_text() for i in range(start, end + 1)]
            text = "\n\n".join(texts)
        else:
            all_text = [p.extract_text() for p in reader.pages]
            text = "\n\n".join(all_text)

    # ---------- PPTX ----------
    elif file_type == "application/vnd.openxmlformats-officedocument.presentationml.presentation":
        prs = Presentation(uploaded_file)
        slide_texts = ["\n".join([shape.text for shape in slide.shapes if hasattr(shape, "text")]) for slide in prs.slides]
        total_slides = len(slide_texts)
        st.write(f"üìä ‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {total_slides} ‡∏™‡πÑ‡∏•‡∏î‡πå")

        mode = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏•‡∏î‡πå", ["üìå ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", "üìç ‡∏ä‡πà‡∏ß‡∏á‡∏™‡πÑ‡∏•‡∏î‡πå", "üìö ‡∏ó‡∏∏‡∏Å‡∏™‡πÑ‡∏•‡∏î‡πå"])
        if mode == "üìå ‡∏™‡πÑ‡∏•‡∏î‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß":
            slide = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏•‡∏î‡πå", list(range(1, total_slides + 1)), index=0)
            text = slide_texts[slide - 1]
        elif mode == "üìç ‡∏ä‡πà‡∏ß‡∏á‡∏™‡πÑ‡∏•‡∏î‡πå":
            start = st.number_input("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÑ‡∏•‡∏î‡πå", 1, total_slides, value=1)
            end = st.number_input("‡∏ñ‡∏∂‡∏á‡∏™‡πÑ‡∏•‡∏î‡πå", start, total_slides, value=start)
            text = "\n\n".join(slide_texts[start - 1:end])
        else:
            text = "\n\n".join(slide_texts)

# ---------- ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏Å‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ----------
if text:
    editable_text = st.text_area("üìã ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)", value=text.strip(), height=200)

    if st.button("üîä ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"):
        tts_en = gTTS(editable_text, lang='en')
        en_audio = io.BytesIO()
        tts_en.write_to_fp(en_audio)
        en_audio.seek(0)
        st.audio(en_audio, format='audio/mp3')

    if st.button("üß† ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå"):
        words = []
        for line in editable_text.splitlines():
            for word in line.split():
                clean_word = re.sub(r"[^a-zA-Z0-9\-]", "", word)
                if clean_word:
                    words.append(clean_word)

        vocab = []
        for word in words:
            try:
                th = GoogleTranslator(source="en", target="th").translate(word)
            except:
                th = "-"
            vocab.append({"english": word, "thai": th})

        st.session_state["vocab_df"] = pd.DataFrame(vocab)

# ---------- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ----------
if "vocab_df" in st.session_state:
    st.info("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç/‡∏•‡∏ö‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
    edited_df = st.data_editor(
        st.session_state["vocab_df"],
        use_container_width=True,
        num_rows="dynamic",
        hide_index=True,
        column_config={
            "english": st.column_config.TextColumn(label="English"),
            "thai": st.column_config.TextColumn(label="Thai Translation")
        }
    )

    if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏•‡∏á Firebase"):
        if not edited_df.empty:
            data_to_save = list(zip(edited_df["english"], edited_df["thai"]))
            save_to_firebase(data_to_save)
            del st.session_state["vocab_df"]
        else:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á")

# ---------- ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ ----------
if text:
    st.subheader("üìù ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÄ‡∏ï‡πá‡∏°")
    try:
        full_translation = GoogleTranslator(source='en', target='th').translate(editable_text)
        st.success(full_translation)

        if st.button("üîä ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"):
            tts_th = gTTS(full_translation, lang='th')
            th_audio = io.BytesIO()
            tts_th.write_to_fp(th_audio)
            th_audio.seek(0)
            st.audio(th_audio, format='audio/mp3')
    except Exception as e:
        st.error("‚ö†Ô∏è ‡πÅ‡∏õ‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: " + str(e))