import streamlit as st
import pytesseract
from PIL import Image
from deep_translator import GoogleTranslator
from gtts import gTTS
import io
import firebase_admin
from firebase_admin import credentials, db
import re
import pandas as pd
from PyPDF2 import PdfReader
from pptx import Presentation

# ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="üìò Word & Sentence Translator", layout="centered")
st.title("üìò ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏õ‡∏•‡∏®‡∏±‡∏û‡∏ó‡πå + ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ + ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡πà‡∏≤‡∏ô")

# ‚úÖ Firebase Init
def init_firebase():
    if not firebase_admin._apps:
        firebase_config = {
            "type": st.secrets["FIREBASE"]["type"],
            "project_id": st.secrets["FIREBASE"]["project_id"],
            "private_key_id": st.secrets["FIREBASE"]["private_key_id"],
            "private_key": st.secrets["FIREBASE"]["private_key"],
            "client_email": st.secrets["FIREBASE"]["client_email"],
            "client_id": st.secrets["FIREBASE"]["client_id"],
            "auth_uri": st.secrets["FIREBASE"]["auth_uri"],
            "token_uri": st.secrets["FIREBASE"]["token_uri"],
            "auth_provider_x509_cert_url": st.secrets["FIREBASE"]["auth_provider_x509_cert_url"],
            "client_x509_cert_url": st.secrets["FIREBASE"]["client_x509_cert_url"]
        }
        cred = credentials.Certificate(firebase_config)
        firebase_admin.initialize_app(cred, {
            'databaseURL': 'https://vocab-tracker-7e059-default-rtdb.asia-southeast1.firebasedatabase.app/'
        })

# ‚úÖ Save only new words
def save_to_firebase(data):
    init_firebase()
    ref = db.reference('vocabulary')
    existing_data = ref.get()
    existing_words = set()

    if existing_data:
        for item in existing_data.values():
            clean_word = re.sub(r"[^a-zA-Z0-9\-]", "", item.get("english", "")).lower()
            existing_words.add(clean_word)

    added_count = 0
    for word, translation in data:
        clean_word = re.sub(r"[^a-zA-Z0-9\-]", "", word).lower()
        if clean_word and clean_word not in existing_words:
            ref.push({
                "english": word,
                "thai": translation
            })
            added_count += 1

    if added_count == 0:
        st.info("üìå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô Firebase")
    else:
        st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡πÉ‡∏´‡∏°‡πà {added_count} ‡∏Ñ‡∏≥ ‡∏•‡∏á Firebase ‡πÅ‡∏•‡πâ‡∏ß")

# ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
uploaded_file = st.file_uploader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (jpg, png, pdf, pptx)", type=["jpg", "jpeg", "png", "pdf", "pptx"])
text = ""

if uploaded_file:
    file_type = uploaded_file.type

    if file_type.startswith("image/"):
        image = Image.open(uploaded_file)
        st.image(image, caption='üì∑ ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö', use_container_width=True)
        gray_image = image.convert("L")
        text = pytesseract.image_to_string(gray_image, lang="eng")

    elif file_type == "application/pdf":
        reader = PdfReader(uploaded_file)
        num_pages = len(reader.pages)
        selected_page = st.selectbox("üìÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô", list(range(1, num_pages + 1)), index=0)
        text = reader.pages[selected_page - 1].extract_text()

    elif file_type == "application/vnd.openxmlformats-officedocument.presentationml.presentation":
        prs = Presentation(uploaded_file)
        slides = [s for s in prs.slides]
        selected_slide = st.selectbox("üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡πÑ‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô", list(range(1, len(slides) + 1)), index=0)
        text_content = [shape.text for shape in slides[selected_slide].shapes if hasattr(shape, "text")]
        text = "\n".join(text_content)

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
if text:
    editable_text = st.text_area("üß† ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ)", value=text.strip(), height=200)

    # ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    if st.button("üîä ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©"):
        tts_en = gTTS(editable_text, lang='en')
        en_audio = io.BytesIO()
        tts_en.write_to_fp(en_audio)
        en_audio.seek(0)
        st.audio(en_audio, format='audio/mp3')

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡∏≥
    if st.button("üß† ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå"):
        words = []
        for line in editable_text.splitlines():
            for word in line.split():
                clean_word = re.sub(r"[^a-zA-Z0-9\-]", "", word)
                if clean_word:
                    words.append(clean_word)

        unique_words = sorted(set(words))
        table_data = []
        for word in unique_words:
            try:
                th = GoogleTranslator(source="en", target="th").translate(word)
            except:
                th = "-"
            table_data.append({"english": word, "thai": th})

        df = pd.DataFrame(table_data)
        st.info("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
        edited_df = st.data_editor(
            df,
            use_container_width=True,
            num_rows="dynamic",
            hide_index=True,
            column_config={
                "english": st.column_config.TextColumn(label="English"),
                "thai": st.column_config.TextColumn(label="Thai Translation")
            }
        )

        if st.button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏•‡∏á Firebase"):
            if not edited_df.empty:
                data_to_save = list(zip(edited_df["english"], edited_df["thai"]))
                save_to_firebase(data_to_save)
            else:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á")

    # ‚úÖ ‡πÅ‡∏õ‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
    st.subheader("üìë ‡πÅ‡∏õ‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÄ‡∏ï‡πá‡∏°")
    try:
        sentences = re.split(r'(?<=[.!?]) +', editable_text.strip())
        translated_sentences = []
        for sent in sentences:
            try:
                translated = GoogleTranslator(source='en', target='th').translate(sent)
            except:
                translated = "-"
            translated_sentences.append(translated)

        full_translation = "\n".join(translated_sentences)
        st.success(full_translation)

        if st.button("üîä ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"):
            tts_th = gTTS(full_translation, lang='th')
            th_audio = io.BytesIO()
            tts_th.write_to_fp(th_audio)
            th_audio.seek(0)
            st.audio(th_audio, format='audio/mp3')

    except Exception as e:
        st.error("‚ö†Ô∏è ‡πÅ‡∏õ‡∏•‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: " + str(e))